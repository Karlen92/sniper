/**
 * \file ConcolicProfiler.h
 *
 * ----------------------------------------------------------------------
 *                SNIPER : Automatic Fault Localization 
 *
 * Copyright (C) 2016 Si-Mohamed LAMRAOUI
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program (see LICENSE.TXT).  
 * If not, see <http://www.gnu.org/licenses/>.
 * ----------------------------------------------------------------------
 *
 * \author Si-Mohamed Lamraoui
 * \date   24 February 2016
 */

#ifndef _CONCOLICPROFILER_H
#define _CONCOLICPROFILER_H

#include <iostream>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "ConcolicModule.h"
#include "Executor.h"

using namespace llvm;

/**
 * \class ConcolicProfiler
 *
 * \brief This class implements the concolic execution algorithm.
 * See ConcolicModule for details.
 */
class ConcolicProfiler : public ConcolicModule {
       
private:
    Function *targetFun;
    ExecutionEngine *EE;
    
public:
    /**
     * Default constructor.
     *
     * \param _llvmMod An LLVM module in which the target function is.
     * \param _targetFun An LLVM target function. 
     * \param _options SNIPER options.
     */
    ConcolicProfiler(Module *_llvmMod, Function *_targetFun, Options *_options) 
					: ConcolicModule(_llvmMod, _targetFun, _options) {
    	this->targetFun = _targetFun;
    	srand(time(NULL));
	}
    /**
     * Destructor.
     */
	~ConcolicProfiler() {
		//delete EE;
	}

    void run(ProgramProfile *profile, LocalVariables *locVars, 
             LoopInfoPass *loopInfo);

private:
	/**
	 * Generate new input values to exercise a different 
	 * execution path in the target function. 
	 *
	 * New values are generated by solving the current SymbolicPath.
	 * The first time (round 1) this function is called, 
	 * it generates variables equal to zero (the original
	 * CUTE algorithm generates random values). 
	 * As opposed to the CUTE algorithm, SNIPER generates both 
	 * failing and successful executions. 
	 *
	 * \return A set of assigned variables. 
	 */
    VariablesPtr generateInputValues();
    /**
     * Generate new input values by solving a SymbolicPath. 
     *
     * Solve the formula (\p path ^ \p asserts) when \p genFailing is true, 
     * otherwise solve the formula (\p path ^ not \p asserts).
     *
     * \param path A set of expressions representing a symbolic path.
     * \param asserts A set of expression representing a post-condition.
     * \param genFailing If true, generate inputs that trigger a failing execution, 
     * otherwise generate inputs that trigger a successful execution.
     * \param inputs The generated input values.
     * \return Return true if a solution was found and some inputs are available. 
     */
    bool solve(std::vector<ExprCellPtr> path, std::vector<ExprCellPtr> asserts, 
               bool genFailing, VariablesPtr inputs);
    
};

#endif // _CONCOLICPROFILER_H
