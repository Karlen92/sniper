;;# process
(set-evidence! true)
(set-verbosity! 3)

;;#=== DEFINES ===
(define bb1_bb2::bool)
(define bb1_bb3::bool)
(define bb2_bb4::bool)
(define bb3_bb4::bool)
(define bb4_bb5::bool)
(define bb4_bb6::bool)
(define bb5_bb7::bool)
(define bb6_bb7::bool)
(define bb7_bb8::bool)
(define bb8_return::bool)
(define bb_bb8::bool)
(define entry_bb::bool)
(define entry_bb1::bool)
(define input::int)
(define .0::int)
(define _::int)
(define tmp::bool)
(define _sign::int)
(define tmp5::bool)
(define _sign1::int)
(define _sign2::int)
(define tmp8::bool)
(define tmp9::int)
(define _abs3::int)
(define _4::int)
(define tmp10::bool)
(define tmp11::int)
(define _retval::int)
(define abs.0::int)
(define _abs::int)
(define sign.0::int)
(define entry::bool)
(define bb::bool)
(define bb1::bool)
(define bb2::bool)
(define bb3::bool)
(define bb4::bool)
(define bb5::bool)
(define bb6::bool)
(define bb7::bool)
(define bb8::bool)
(define return::bool)

;;#---- Control Flow ---------------------------
(assert (= entry true) )
(assert (= bb (and entry entry_bb)) )
(assert (= bb1 (and entry entry_bb1)) )
(assert (= bb2 (and bb1 bb1_bb2)) )
(assert (= bb3 (and bb1 bb1_bb3)) )
(assert (= bb4
   (or (and (and bb3 bb3_bb4) (not (and bb2 bb2_bb4)))
       (and (not (and bb3 bb3_bb4)) (and bb2 bb2_bb4)))) )
(assert (= bb5 (and bb4 bb4_bb5)) )
(assert (= bb6 (and bb4 bb4_bb6)) )
(assert (= bb7
   (or (and (and bb6 bb6_bb7) (not (and bb5 bb5_bb7)))
       (and (not (and bb6 bb6_bb7)) (and bb5 bb5_bb7)))) )
(assert (= bb8
   (or (and (and bb7 bb7_bb8) (not (and bb bb_bb8)))
       (and (not (and bb7 bb7_bb8)) (and bb bb_bb8)))) )
(assert (= return (and bb8 bb8_return)) )
;;#---------------------------------------------

;;# CE
;;(assert (= input -1) )

(assert+ (= _abs input) 10)
(assert+ (= tmp (= input 0)) 10)
(assert (and (= entry_bb tmp) (= entry_bb1 (not tmp))) )
(assert+ (= _ 0) 10)
(assert (= bb bb_bb8) )
(assert+ (= tmp5 (< input 0)) 10)
(assert (and (= bb1_bb2 tmp5) (= bb1_bb3 (not tmp5))) )
(assert+ (= _sign -1) 1)
(assert (= bb2 bb2_bb4) )
(assert+ (= _sign1 1) 10)
(assert (= bb3 bb3_bb4) )
(assert (= sign.0 (ite (and bb2 bb2_bb4) _sign _sign1)) )
(assert+ (= tmp8 (= sign.0 -1)) 10)
(assert (and (= bb4_bb5 tmp8) (= bb4_bb6 (not tmp8))) )
(assert+ (= tmp9 (- 0 input)) 1)
(assert+ (= _sign2 tmp9) 1)
(assert (= bb5 bb5_bb7) )
(assert+ (= _abs3 input) 10)
(assert (= bb6 bb6_bb7) )
(assert (= abs.0 (ite (and bb5 bb5_bb7) _abs _abs3)) )
(assert (= tmp10 (>= abs.0 0)) )
(assert (= tmp11 (ite tmp10 1 0)) )
(assert (and bb7 (= tmp11 1) ) )
(assert+ (= _4 abs.0) 10)
(assert (= bb7 bb7_bb8) )
(assert (= .0 (ite (and bb bb_bb8) _ _4)) )
(assert+ (= _retval .0) 10)
(assert (= bb8 bb8_return) )

(max-sat)
