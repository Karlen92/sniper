(set-evidence! true)
(set-verbosity! 3)

(define bb1_bb2::bool)
(define bb1_bb3::bool)
(define bb2_bb3::bool)
(define bb3_return::bool)
(define bb_bb1::bool)
(define entry_bb::bool)
(define entry_bb1::bool)
(define tmp5::bool)
(define tmp6::int)
(define input::int)
(define x.1::int)
(define x.0::int)
(define _y::int)
(define tmp::int)
(define _x1::int)
(define tmp3::bool)
(define _x2::int)
(define tmp4::bool)
(define _x::int)
(define entry::bool)
(define bb::bool)
(define bb1::bool)
(define bb2::bool)
(define bb3::bool)
(define return::bool)



(assert (= entry true))
(assert (= bb (and entry entry_bb)))
(assert (= bb1
   (or (and (and bb bb_bb1) (not (and entry entry_bb1)))
       (and (not (and bb bb_bb1)) (and entry entry_bb1)))))
(assert (= bb2 (and bb1 bb1_bb2)))
(assert (= bb3
   (or (and (and bb2 bb2_bb3) (not (and bb1 bb1_bb3)))
       (and (not (and bb2 bb2_bb3)) (and bb1 bb1_bb3)))))
(assert (= return (and bb3 bb3_return)))
(assert (and (= entry_bb tmp3) (= entry_bb1 (not tmp3))))
(assert (= bb bb_bb1))
(assert (= x.0 (ite (and bb bb_bb1) _x1 _x)))
(assert (and (= bb1_bb2 tmp4) (= bb1_bb3 (not tmp4))))
(assert (= bb2 bb2_bb3))
(assert (= x.1 (ite (and bb2 bb2_bb3) _x2 x.0)))
(assert (= tmp5 (/= x.1 0)))
(assert (= tmp6 (ite tmp5 1 0)))
(assert (= bb3 bb3_return))

;;# CE
;;(assert (= input 41))
;;#POST
;;(assert (and bb3 (= tmp6 1)))
;;#NOT-POST
(assert (and bb3 (= tmp6 0)))
 

(assert+ (= _x 1) 1)
(assert+ (= tmp (- input 42)) 1)
(assert+ (= _y tmp) 1)
(assert+ (= tmp3 (= _y 0)) 1)
(assert+ (= _x1 0) 1)
(assert+ (= tmp4 (< _y 0)) 1)
(assert+ (= _x2 0) 1)

;;#BB-ASSERT round 1  -> input = 42
;;(assert bb)
;;#BB-ASSERT round 2  -> input = 41
;;(assert bb1)
;;#BB-ASSERT round 3  -> input = 41
;;(assert bb2)
;;#BB-ASSERT round 2  -> input = 41
;;(assert bb3)

(check)
