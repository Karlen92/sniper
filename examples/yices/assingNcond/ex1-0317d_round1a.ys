;; CBMC counterexample:
;;----------------------------------------------------
;;  x=1 (00000000000000000000000000000001)
;;
;; [...]
;;
;;State 17 file ./examples/heuristics/ex1-0317d.c line 31 function foo thread 0
;;----------------------------------------------------
;;  a=4 (00000000000000000000000000000100)
;;State 18 file ./examples/heuristics/ex1-0317d.c line 31 function foo thread 0
;;----------------------------------------------------
;;  b=1 (00000000000000000000000000000001)
;;State 22 file ./examples/heuristics/ex1-0317d.c line 39 function foo thread 0
;;----------------------------------------------------
;;  u=5 (00000000000000000000000000000101)
;;State 23 file ./examples/heuristics/ex1-0317d.c line 39 function foo thread 0
;;----------------------------------------------------
;;  v=2 (00000000000000000000000000000010)
;;State 26 file ./examples/heuristics/ex1-0317d.c line 47 function foo thread 0
;;----------------------------------------------------
;;  y=-3 (11111111111111111111111111111101)


(set-evidence! true)
(set-verbosity! 3)
;;#=== DEFINES ===
(define bb10_bb11::bool)(define bb10_bb14::bool)(define bb11_bb12::bool)
(define bb11_bb14::bool)(define bb12_bb13::bool)(define bb12_bb14::bool)
(define bb13_bb14::bool)(define bb13_bb15::bool)(define bb14_bb16::bool)
(define bb15_bb16::bool)(define bb16_return::bool)(define bb1_bb2::bool)
(define bb2_bb3::bool)(define bb2_bb4::bool)(define bb3_bb7::bool)
(define bb4_bb5::bool)(define bb4_bb6::bool)(define bb5_bb7::bool)
(define bb6_bb7::bool)(define bb7_bb8::bool)(define bb7_bb9::bool)
(define bb8_bb10::bool)(define bb9_bb10::bool)(define bb_bb2::bool)
(define entry_bb::bool)(define entry_bb1::bool)(define bb::bool)
(define bb1::bool)(define bb2::bool)(define bb3::bool)(define bb4::bool)
(define bb5::bool)(define bb6::bool)(define bb7::bool)(define bb8::bool)
(define bb9::bool)(define bb10::bool)(define bb11::bool)(define bb12::bool)
(define bb13::bool)(define bb14::bool)(define bb15::bool)(define bb16::bool)
(define entry::bool)(define x::int)(define v.0::int)(define tmp::int)
(define tmp2::int)(define tmp4::int)(define tmp5::int)(define tmp6::int)
(define tmp7::int)(define _v1::int)(define tmp8::int)(define tmp9::int)
(define tmp10::int)(define tmp11::int)(define tmp12::int)(define tmp13::int)
(define tmp14::int)(define tmp15::int)(define tmp16::int)(define tmp17::int)
(define tmp18::int)(define tmp19::int)(define tmp20::int)(define tmp21::int)
(define _retval::int)(define u.0::int)(define _v::int)(define ay0::int)
(define iftmp.0.0::int)(define a.0::int)(define a.01::int)(define a.02::int)
(define b.0::int)(define b.01::int)(define b.02::int)


(assert (= entry true) )
(assert (= bb (and entry entry_bb)) )
(assert (= bb1 (and entry entry_bb1)) )
(assert (= bb2 (or (and bb1 bb1_bb2) (and bb bb_bb2))) )
(assert (= bb3 (and bb2 bb2_bb3)) )
(assert (= bb4 (and bb2 bb2_bb4)) )
(assert (= bb5 (and bb4 bb4_bb5)) )
(assert (= bb6 (and bb4 bb4_bb6)) )
(assert (= bb7 (or (and bb6 bb6_bb7) 
(and bb5 bb5_bb7) (and bb3 bb3_bb7))) )
(assert (= bb8 (and bb7 bb7_bb8)) )
(assert (= bb9 (and bb7 bb7_bb9)) )
(assert (= bb10 (or (and bb9 bb9_bb10) (and bb8 bb8_bb10))) )
(assert (= bb11 (and bb10 bb10_bb11)) )
(assert (= bb12 (and bb11 bb11_bb12)) )
(assert (= bb13 (and bb12 bb12_bb13)) )
(assert (= bb14 (or (and bb13 bb13_bb14) (and bb12 bb12_bb14) 
(and bb11 bb11_bb14) (and bb10 bb10_bb14))) )
(assert (= bb15 (and bb13 bb13_bb15)) )
(assert (= bb16 (or (and bb15 bb15_bb16) (and bb14 bb14_bb16))) )


;;# PRE cond
(assert (= tmp (= x 1)) )
(assert (and entry tmp) )

(assert+ (= tmp4 (<= x 9)) 3) ;;#Cond       ---- Loc 1 ----
(assert (and (= entry_bb tmp4) (= entry_bb1 (not tmp4))) )
(assert (= bb_bb2 true) )
(assert (= bb1_bb2 true) )
(assert+ (= a.01 4) 1) ;;#Assign
(assert+ (= b.01 1) 1) ;;#Assign
(assert+ (= a.02 1) 3)
(assert+ (= b.02 4) 3)
(assert (= a.0 (ite (and bb bb_bb2) a.01 a.02)) )
(assert (= b.0 (ite (and bb bb_bb2) b.01 b.02)) )

(assert+ (= tmp5 (+ x a.0)) 3)   ;;#---- Loc 2 ----
(assert+ (= tmp6 (> tmp5 10)) 3) 
(assert (and (= bb2_bb3 tmp6) (= bb2_bb4 (not tmp6))) )
(assert+ (= tmp7 (+ a.0 b.0)) 3)
(assert+ (= _v b.0) 3)
(assert (= bb3_bb7 true) )
(assert+ (= tmp8 (+ x a.0)) 3) ;;#Cond
(assert+ (= tmp9 (<= tmp8 5)) 3) ;;#Cond
(assert (and (= bb4_bb5 tmp9) (= bb4_bb6 (not tmp9))) )
(assert+ (= tmp10 (+ a.0 b.0)) 1) ;;#Assign
(assert+ (= tmp11 (+ x b.0)) 1) ;;#Assign
(assert (= bb5_bb7 true) )
(assert+ (= tmp12 (+ x b.0)) 3)
(assert+ (= _v1 a.0) 3)
(assert (= bb6_bb7 true) )
(assert (= u.0  (ite (and bb3 bb3_bb7) tmp7 (ite (and bb5 bb5_bb7) tmp10 tmp12))) )
(assert (= v.0 (ite (and bb3 bb3_bb7) _v (ite (and bb5 bb5_bb7) tmp11 _v1))) )

(assert+ (= tmp13 (<= v.0 1)) 3) ;;#Cond      #### BUG ####
(assert (and (= bb7_bb8 tmp13) (= bb7_bb9 (not tmp13))) )
(assert+ (= tmp14 (+ u.0 v.0)) 3)
(assert (= bb8_bb10 true) )
(assert+ (= tmp15 (- v.0 u.0)) 1) ;;#Assign   ---- Loc 3 ----
(assert (= bb9_bb10 true) )
(assert (= ay0 (ite (and bb8 bb8_bb10) tmp14 tmp15)) )


;;# POST cond
;;#    ((0 <= x <= 1) and (y == x + 6)) 
;;#    or ((1 < x <= 6)   and (y == 3 - x))
;;#    or ((6 < x < 10)   and (y == 6))
;;#    or ((10 <= x < 16) and (y == -1)) 
(assert  (or
			(and   (and (<= 0 x) (<= x 1))  (= ay0 (+ x 6))  ) 
            (and    (and (< 1 x) (<= x 6))  (= ay0 (- 3 x))   )
            (and    (and (< 6 x) (< x 10))  (= ay0 6)   )
            (and    (and (<= 10 x) (< x 10))  (= ay0 -1)   )
   		)
)

(max-sat)
