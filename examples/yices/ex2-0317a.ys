(set-evidence! true)
(set-verbosity! 3)
;;#=== DEFINES ===
(define bb1_bb2::bool)(define bb2_bb3::bool)(define bb2_bb4::bool)
(define bb3_bb5::bool)(define bb4_bb5::bool)(define bb5_return::bool)
(define bb_bb2::bool)(define entry_bb::bool)(define entry_bb1::bool)
(define k::int)(define tmp::int)(define tmp1::int)(define tmp3::int)
(define j.0::int)(define j.01::int)(define j.02::int)(define i.0::int)
(define i.01::int)(define i.02::int)(define tmp4::int)(define tmp5::int)
(define tmp6::int)(define tmp7::int)(define tmp8::int)(define tmp9::int)
(define tmp10::int)(define tmp11::int)(define tmp12::int)(define tmp13::int)
(define tmp14::int)(define ay.0::int)(define entry::bool)(define bb::bool)
(define bb1::bool)(define bb2::bool)(define bb3::bool)(define bb4::bool)
(define bb5::bool)(define return::bool)

(assert (= entry true) )
(assert (= bb (and entry entry_bb)) )
(assert (= bb1 (and entry entry_bb1)) )
(assert (= bb2 (or (and bb1 bb1_bb2) (and bb bb_bb2))) )
(assert (= bb3 (and bb2 bb2_bb3)) )
(assert (= bb4 (and bb2 bb2_bb4)) )
(assert (= bb5 (or (and bb4 bb4_bb5) (and bb3 bb3_bb5))) )
(assert (= return (and bb5 bb5_return)) )


;;# Pre cond
(assert (= k 6) )

(assert+ (= tmp3 (> k 4)) 1)
(assert (and (= entry_bb tmp3) (= entry_bb1 (not tmp3))) )
(assert (= bb_bb2 true) )
(assert (= bb1_bb2 true) )
(assert+ (= i.01 1) 1)
(assert+ (= j.01 2) 1)
(assert+ (= i.02 2) 1)
(assert+ (= j.02 0) 1)
(assert (= i.0 (ite (and bb bb_bb2) i.01 i.02)) )
(assert (= j.0 (ite (and bb bb_bb2) j.01 j.02)) )

(assert+ (= tmp4 (+ i.0 j.0)) 1)
(assert+ (= tmp5 (- tmp4 1)) 1)

(assert+ (= tmp6 (* tmp5 3)) 1)
(assert+ (= tmp7 (> tmp6 k)) 1)  ;;# ---- Loc 1 -----
(assert (and (= bb2_bb3 tmp7) (= bb2_bb4 (not tmp7))) )
(assert+ (= tmp8 (* tmp5 3)) 1)
(assert+ (= tmp9 (- tmp8 k)) 1)
(assert (= bb3_bb5 true) )
(assert+ (= tmp10 (* tmp5 2)) 1)
(assert+ (= tmp11 (- k tmp10)) 1)
(assert+ (= tmp12 (- tmp11 2)) 1)
(assert (= bb4_bb5 true) )
(assert (= ay.0 (ite (and bb3 bb3_bb5) tmp9 tmp12)) )

;;# Post cond
(assert (> ay.0 0))



(max-sat)
