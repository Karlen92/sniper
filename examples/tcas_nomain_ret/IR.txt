---- Target Function IR ----------------------

; Function Attrs: alwaysinline nounwind ssp uwtable
define i32 @foo(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10, i32 %arg11, i32 %arg12) #0 {
bb:
  %aPositive_RA_Alt_Thresh = alloca [4 x i32]
  %_ = add i32 400, 0, !dbg !18
  %tmp = getelementptr inbounds [4 x i32]* %aPositive_RA_Alt_Thresh, i32 0, i64 0
  store i32 %_, i32* %tmp, !dbg !18
  %_2 = add i32 500, 0, !dbg !20
  %tmp11 = getelementptr inbounds [4 x i32]* %aPositive_RA_Alt_Thresh, i32 0, i64 1
  store i32 %_2, i32* %tmp11, !dbg !20
  %_3 = add i32 640, 0, !dbg !21
  %tmp12 = getelementptr inbounds [4 x i32]* %aPositive_RA_Alt_Thresh, i32 0, i64 2
  store i32 %_3, i32* %tmp12, !dbg !21
  %_4 = add i32 740, 0, !dbg !22
  %tmp13 = getelementptr inbounds [4 x i32]* %aPositive_RA_Alt_Thresh, i32 0, i64 3
  store i32 %_4, i32* %tmp13, !dbg !22
  %_Cur_Vertical_Sep = add i32 %arg1, 0, !dbg !23
  %_High_Confidence = add i32 %arg2, 0, !dbg !24
  %_Two_of_Three_Reports_Valid = add i32 %arg3, 0, !dbg !25
  %_Own_Tracked_Alt = add i32 %arg4, 0, !dbg !26
  %_Own_Tracked_Alt_Rate = add i32 %arg5, 0, !dbg !27
  %_Other_Tracked_Alt = add i32 %arg6, 0, !dbg !28
  %_Alt_Layer_Value = add i32 %arg7, 0, !dbg !29
  %_Up_Separation = add i32 %arg8, 0, !dbg !30
  %_Down_Separation = add i32 %arg9, 0, !dbg !31
  %_Other_RAC = add i32 %arg10, 0, !dbg !32
  %_Other_Capability = add i32 %arg11, 0, !dbg !33
  %_Climb_Inhibit = add i32 %arg12, 0, !dbg !34
  %tmp14 = icmp ne i32 %_High_Confidence, 0, !dbg !35
  br i1 %tmp14, label %bb15, label %bb19, !dbg !35

bb15:                                             ; preds = %bb
  %tmp16 = icmp sle i32 %_Own_Tracked_Alt_Rate, 600, !dbg !35
  br i1 %tmp16, label %bb17, label %bb19, !dbg !35

bb17:                                             ; preds = %bb15
  %tmp18 = icmp sgt i32 %_Cur_Vertical_Sep, 600, !dbg !35
  br label %bb19

bb19:                                             ; preds = %bb17, %bb15, %bb
  %tmp20 = phi i1 [ false, %bb15 ], [ false, %bb ], [ %tmp18, %bb17 ]
  %tmp21 = zext i1 %tmp20 to i32
  %_enabled.i = add i32 %tmp21, 0
  %tmp22 = icmp eq i32 %_Other_Capability, 1, !dbg !37
  %tmp23 = zext i1 %tmp22 to i32, !dbg !37
  %_tcas_equipped.i = add i32 %tmp23, 0, !dbg !37
  %tmp24 = icmp ne i32 %_Two_of_Three_Reports_Valid, 0, !dbg !38
  br i1 %tmp24, label %bb25, label %bb27, !dbg !38

bb25:                                             ; preds = %bb19
  %tmp26 = icmp eq i32 %_Other_RAC, 0, !dbg !38
  br label %bb27

bb27:                                             ; preds = %bb25, %bb19
  %tmp28 = phi i1 [ false, %bb19 ], [ %tmp26, %bb25 ]
  %tmp29 = zext i1 %tmp28 to i32
  %_intent_not_known.i = add i32 %tmp29, 0
  %_alt_sep.i = add i32 0, 0, !dbg !39
  %tmp30 = icmp ne i32 %_enabled.i, 0, !dbg !40
  br i1 %tmp30, label %bb31, label %alt_sep_test.exit, !dbg !40

bb31:                                             ; preds = %bb27
  %tmp32 = icmp ne i32 %_tcas_equipped.i, 0, !dbg !40
  br i1 %tmp32, label %bb33, label %bb35, !dbg !40

bb33:                                             ; preds = %bb31
  %tmp34 = icmp ne i32 %_intent_not_known.i, 0, !dbg !40
  br i1 %tmp34, label %bb37, label %bb35, !dbg !40

bb35:                                             ; preds = %bb33, %bb31
  %tmp36 = icmp ne i32 %_tcas_equipped.i, 0, !dbg !40
  br i1 %tmp36, label %alt_sep_test.exit, label %bb37, !dbg !40

bb37:                                             ; preds = %bb35, %bb33
  %tmp38 = icmp ne i32 %_Climb_Inhibit, 0, !dbg !42
  br i1 %tmp38, label %bb39, label %bb41, !dbg !42

bb39:                                             ; preds = %bb37
  %tmp40 = add nsw i32 %_Up_Separation, 100, !dbg !42
  br label %Inhibit_Biased_Climb.exit.i.i, !dbg !42

bb41:                                             ; preds = %bb37
  br label %Inhibit_Biased_Climb.exit.i.i, !dbg !42

Inhibit_Biased_Climb.exit.i.i:                    ; preds = %bb41, %bb39
  %tmp42 = phi i32 [ %tmp40, %bb39 ], [ %_Up_Separation, %bb41 ], !dbg !42
  %tmp43 = icmp sgt i32 %tmp42, %_Down_Separation, !dbg !43
  %tmp44 = zext i1 %tmp43 to i32, !dbg !43
  %_upward_preferred.i.i = add i32 %tmp44, 0, !dbg !43
  %tmp45 = icmp ne i32 %_upward_preferred.i.i, 0, !dbg !46
  br i1 %tmp45, label %bb46, label %bb62, !dbg !46

bb46:                                             ; preds = %Inhibit_Biased_Climb.exit.i.i
  %tmp47 = icmp slt i32 %_Own_Tracked_Alt, %_Other_Tracked_Alt, !dbg !48
  %tmp48 = zext i1 %tmp47 to i32, !dbg !48
  br i1 %tmp47, label %bb49, label %bb59, !dbg !49

bb49:                                             ; preds = %bb46
  %tmp50 = icmp slt i32 %_Own_Tracked_Alt, %_Other_Tracked_Alt, !dbg !48
  %tmp51 = zext i1 %tmp50 to i32, !dbg !48
  br i1 %tmp50, label %bb52, label %bb57, !dbg !49

bb52:                                             ; preds = %bb49
  %tmp53 = getelementptr inbounds [4 x i32]* %aPositive_RA_Alt_Thresh, i32 0, i64 0
  %tmp54 = load i32* %tmp53, align 4, !dbg !51
  %_ret.i1.i.i = add i32 %tmp54, 0, !dbg !51
  %tmp55 = icmp sge i32 %_Down_Separation, %_ret.i1.i.i, !dbg !49
  %tmp56 = xor i1 %tmp55, true, !dbg !49
  br label %bb57

bb57:                                             ; preds = %bb52, %bb49
  %tmp58 = phi i1 [ false, %bb49 ], [ %tmp56, %bb52 ]
  br label %bb59

bb59:                                             ; preds = %bb57, %bb46
  %tmp60 = phi i1 [ true, %bb46 ], [ %tmp58, %bb57 ]
  %tmp61 = zext i1 %tmp60 to i32
  %_result.i.i = add i32 %tmp61, 0
  br label %Non_Crossing_Biased_Climb.exit.i, !dbg !52

bb62:                                             ; preds = %Inhibit_Biased_Climb.exit.i.i
  %tmp63 = icmp slt i32 %_Other_Tracked_Alt, %_Own_Tracked_Alt, !dbg !53
  %tmp64 = zext i1 %tmp63 to i32, !dbg !53
  br i1 %tmp63, label %bb65, label %bb71, !dbg !54

bb65:                                             ; preds = %bb62
  %tmp66 = icmp sge i32 %_Cur_Vertical_Sep, 300, !dbg !54
  br i1 %tmp66, label %bb67, label %bb71, !dbg !54

bb67:                                             ; preds = %bb65
  %tmp68 = getelementptr inbounds [4 x i32]* %aPositive_RA_Alt_Thresh, i32 0, i64 0
  %tmp69 = load i32* %tmp68, align 4, !dbg !56
  %_ret.i.i.i = add i32 %tmp69, 0, !dbg !56
  %tmp70 = icmp sge i32 %_Up_Separation, %_ret.i.i.i, !dbg !54
  br label %bb71

bb71:                                             ; preds = %bb67, %bb65, %bb62
  %tmp72 = phi i1 [ false, %bb65 ], [ false, %bb62 ], [ %tmp70, %bb67 ]
  %tmp73 = zext i1 %tmp72 to i32
  %_result.i.i5 = add i32 %tmp73, 0
  br label %Non_Crossing_Biased_Climb.exit.i

Non_Crossing_Biased_Climb.exit.i:                 ; preds = %bb71, %bb59
  %result.i.i.0 = phi i32 [ %_result.i.i, %bb59 ], [ %_result.i.i5, %bb71 ]
  %_ret.i.i = add i32 %result.i.i.0, 0, !dbg !57
  %tmp74 = icmp ne i32 %_ret.i.i, 0, !dbg !44
  br i1 %tmp74, label %bb75, label %bb78, !dbg !44

bb75:                                             ; preds = %Non_Crossing_Biased_Climb.exit.i
  %tmp76 = icmp slt i32 %_Own_Tracked_Alt, %_Other_Tracked_Alt, !dbg !58
  %tmp77 = zext i1 %tmp76 to i32, !dbg !58
  br label %bb78

bb78:                                             ; preds = %bb75, %Non_Crossing_Biased_Climb.exit.i
  %tmp79 = phi i1 [ false, %Non_Crossing_Biased_Climb.exit.i ], [ %tmp76, %bb75 ]
  %tmp80 = zext i1 %tmp79 to i32
  %_need_upward_RA.i = add i32 %tmp80, 0
  %tmp81 = icmp ne i32 %_Climb_Inhibit, 0, !dbg !59
  br i1 %tmp81, label %bb82, label %bb84, !dbg !59

bb82:                                             ; preds = %bb78
  %tmp83 = add nsw i32 %_Up_Separation, 100, !dbg !59
  br label %Inhibit_Biased_Climb.exit.i4.i, !dbg !59

bb84:                                             ; preds = %bb78
  br label %Inhibit_Biased_Climb.exit.i4.i, !dbg !59

Inhibit_Biased_Climb.exit.i4.i:                   ; preds = %bb84, %bb82
  %tmp85 = phi i32 [ %tmp83, %bb82 ], [ %_Up_Separation, %bb84 ], !dbg !59
  %tmp86 = icmp sgt i32 %tmp85, %_Down_Separation, !dbg !60
  %tmp87 = zext i1 %tmp86 to i32, !dbg !60
  %_upward_preferred.i1.i = add i32 %tmp87, 0, !dbg !60
  %tmp88 = icmp ne i32 %_upward_preferred.i1.i, 0, !dbg !62
  br i1 %tmp88, label %bb89, label %bb101, !dbg !62

bb89:                                             ; preds = %Inhibit_Biased_Climb.exit.i4.i
  %tmp90 = icmp slt i32 %_Own_Tracked_Alt, %_Other_Tracked_Alt, !dbg !64
  %tmp91 = zext i1 %tmp90 to i32, !dbg !64
  br i1 %tmp90, label %bb92, label %bb98, !dbg !65

bb92:                                             ; preds = %bb89
  %tmp93 = icmp sge i32 %_Cur_Vertical_Sep, 300, !dbg !65
  br i1 %tmp93, label %bb94, label %bb98, !dbg !65

bb94:                                             ; preds = %bb92
  %tmp95 = getelementptr inbounds [4 x i32]* %aPositive_RA_Alt_Thresh, i32 0, i64 0
  %tmp96 = load i32* %tmp95, align 4, !dbg !67
  %_ret.i1.i5.i = add i32 %tmp96, 0, !dbg !67
  %tmp97 = icmp sge i32 %_Down_Separation, %_ret.i1.i5.i, !dbg !65
  br label %bb98

bb98:                                             ; preds = %bb94, %bb92, %bb89
  %tmp99 = phi i1 [ false, %bb92 ], [ false, %bb89 ], [ %tmp97, %bb94 ]
  %tmp100 = zext i1 %tmp99 to i32
  %_result.i3.i = add i32 %tmp100, 0
  br label %Non_Crossing_Biased_Descend.exit.i, !dbg !68

bb101:                                            ; preds = %Inhibit_Biased_Climb.exit.i4.i
  %tmp102 = icmp slt i32 %_Other_Tracked_Alt, %_Own_Tracked_Alt, !dbg !69
  %tmp103 = zext i1 %tmp102 to i32, !dbg !69
  br i1 %tmp102, label %bb104, label %bb113, !dbg !70

bb104:                                            ; preds = %bb101
  %tmp105 = icmp slt i32 %_Other_Tracked_Alt, %_Own_Tracked_Alt, !dbg !69
  %tmp106 = zext i1 %tmp105 to i32, !dbg !69
  br i1 %tmp105, label %bb107, label %bb111, !dbg !70

bb107:                                            ; preds = %bb104
  %tmp108 = getelementptr inbounds [4 x i32]* %aPositive_RA_Alt_Thresh, i32 0, i64 0
  %tmp109 = load i32* %tmp108, align 4, !dbg !72
  %_ret.i.i6.i = add i32 %tmp109, 0, !dbg !72
  %tmp110 = icmp sge i32 %_Up_Separation, %_ret.i.i6.i, !dbg !70
  br label %bb111

bb111:                                            ; preds = %bb107, %bb104
  %tmp112 = phi i1 [ false, %bb104 ], [ %tmp110, %bb107 ]
  br label %bb113

bb113:                                            ; preds = %bb111, %bb101
  %tmp114 = phi i1 [ true, %bb101 ], [ %tmp112, %bb111 ]
  %tmp115 = zext i1 %tmp114 to i32
  %_result.i3.i6 = add i32 %tmp115, 0
  br label %Non_Crossing_Biased_Descend.exit.i

Non_Crossing_Biased_Descend.exit.i:               ; preds = %bb113, %bb98
  %result.i3.i.0 = phi i32 [ %_result.i3.i, %bb98 ], [ %_result.i3.i6, %bb113 ]
  %_ret.i7.i = add i32 %result.i3.i.0, 0, !dbg !73
  %tmp116 = icmp ne i32 %_ret.i7.i, 0, !dbg !61
  br i1 %tmp116, label %bb117, label %bb120, !dbg !61

bb117:                                            ; preds = %Non_Crossing_Biased_Descend.exit.i
  %tmp118 = icmp slt i32 %_Other_Tracked_Alt, %_Own_Tracked_Alt, !dbg !74
  %tmp119 = zext i1 %tmp118 to i32, !dbg !74
  br label %bb120

bb120:                                            ; preds = %bb117, %Non_Crossing_Biased_Descend.exit.i
  %tmp121 = phi i1 [ false, %Non_Crossing_Biased_Descend.exit.i ], [ %tmp118, %bb117 ]
  %tmp122 = zext i1 %tmp121 to i32
  %_need_downward_RA.i = add i32 %tmp122, 0
  %tmp123 = icmp ne i32 %_need_upward_RA.i, 0, !dbg !75
  br i1 %tmp123, label %bb124, label %bb127, !dbg !75

bb124:                                            ; preds = %bb120
  %tmp125 = icmp ne i32 %_need_downward_RA.i, 0, !dbg !75
  br i1 %tmp125, label %bb126, label %bb127, !dbg !75

bb126:                                            ; preds = %bb124
  %_alt_sep.i7 = add i32 0, 0, !dbg !77
  br label %bb136, !dbg !77

bb127:                                            ; preds = %bb124, %bb120
  %tmp128 = icmp ne i32 %_need_upward_RA.i, 0, !dbg !78
  br i1 %tmp128, label %bb129, label %bb130, !dbg !78

bb129:                                            ; preds = %bb127
  %_alt_sep.i8 = add i32 1, 0, !dbg !80
  br label %bb135, !dbg !80

bb130:                                            ; preds = %bb127
  %tmp131 = icmp ne i32 %_need_downward_RA.i, 0, !dbg !81
  br i1 %tmp131, label %bb132, label %bb133, !dbg !81

bb132:                                            ; preds = %bb130
  %_alt_sep.i9 = add i32 2, 0, !dbg !83
  br label %bb134, !dbg !83

bb133:                                            ; preds = %bb130
  %_alt_sep.i10 = add i32 0, 0, !dbg !84
  br label %bb134

bb134:                                            ; preds = %bb133, %bb132
  %alt_sep.i.0 = phi i32 [ %_alt_sep.i9, %bb132 ], [ %_alt_sep.i10, %bb133 ]
  br label %bb135

bb135:                                            ; preds = %bb134, %bb129
  %alt_sep.i.1 = phi i32 [ %_alt_sep.i8, %bb129 ], [ %alt_sep.i.0, %bb134 ]
  br label %bb136

bb136:                                            ; preds = %bb135, %bb126
  %alt_sep.i.2 = phi i32 [ %_alt_sep.i7, %bb126 ], [ %alt_sep.i.1, %bb135 ]
  br label %alt_sep_test.exit, !dbg !85

alt_sep_test.exit:                                ; preds = %bb27, %bb35, %bb136
  %alt_sep.i.3 = phi i32 [ %alt_sep.i.2, %bb136 ], [ %_alt_sep.i, %bb35 ], [ %_alt_sep.i, %bb27 ]
  %_ret.i = add i32 %alt_sep.i.3, 0, !dbg !86
  %_ret = add i32 %_ret.i, 0, !dbg !36
  %_ret1 = add i32 %_ret, 0, !dbg !87
  ret i32 %_ret1, !dbg !87
}
----------------------------------------------