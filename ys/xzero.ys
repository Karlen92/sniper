(set-evidence! true)
(set-verbosity! 3)

(define bb1_return::bool)
(define bb_bb1::bool)
(define entry_bb::bool)
(define entry_bb1::bool)
(define tmp4::int)
(define input::int)
(define x.0::int)
(define _y::int)
(define tmp::int)
(define _x1::int)
(define tmp2::bool)
(define tmp3::bool)
(define _x::int)
(define entry::bool)
(define bb::bool)
(define bb1::bool)
(define return::bool)

(assert (= entry true))
(assert (= bb (and entry entry_bb)))
(assert (= bb1
   (or (and (and bb bb_bb1) (not (and entry entry_bb1)))
       (and (not (and bb bb_bb1)) (and entry entry_bb1)))))
(assert (= return (and bb1 bb1_return)))
(assert (and (= entry_bb tmp2) (= entry_bb1 (not tmp2))))
(assert (= bb bb_bb1))
(assert (= x.0 (ite (and bb bb_bb1) _x1 _x)))
(assert (= tmp3 (/= x.0 0)))
(assert (= tmp4 (ite tmp3 1 0)))
(assert (= bb1 bb1_return))


(assert+ (= _x 1)               3)
(assert+ (= tmp (- input 42))   9)
(assert+ (= _y tmp)             9)
(assert+ (= tmp2 (< _y 0))      10)  ;;#
(assert+ (= _x1 0)              9)

;;# PRE
(assert (= input 41))
;;# POST
(assert (and bb1 (= tmp4 1)))

;;# ROOT CAUSES:
;;#(assert+ (= tmp2 (< _y 0))      1)
;;#(assert+ (= _y tmp)             1)
;;#(assert+ (= tmp (- input 42))   1)
;;#(assert+ (= _x1 0)              3)


;;#We run SNIPER on this program. The Path Exporation 
;;#step found one successful trace and one failing trace.
;;#In the successful trace, the input value is 42 and the 
;;#statements at the lines 3, 4, 5 and 7 are executed.
;;#In the failling trace, the input value is 41 and the 
;;#statements at the lines 3, 4, 5, 6 and 7 are executed.
;;#The input value (\texttt{input==41}) of the failing trace 
;;#was used as a counterexample for the Error Localization 
;;#step. The set difference of the successful traces and the 
;;#failing trace is empty. In consequence, all the weights 
;;#were set to $W_{a}$. After running the Iteration 
;;#Algorithm we obtain potential root causes 
;;#in the lines 4, 5 and 6.


(max-sat)

