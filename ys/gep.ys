(set-evidence! true)
(set-verbosity! 3)

(define entry_return::bool)
(define _::int)
(define y::int)
(define tmp::int)
(define tmp4::int)
(define _1::int)
(define tmp5::int)
(define tmp6::int)
(define tmp7::int)
(define _2::int)
(define tmp8::int)
(define tmp9::int)
(define tmp10::int)
(define _x::int)
(define tmp11::int)
(define tmp12::int)
(define _3::int)
(define tmp13::bool)
(define tmp14::int)
(define _retval::int)
(define entry::bool)
(define return::bool)
(define MEM0::(-> int int))
(define MEM1::(-> int int))
(define MEM2::(-> int int))
(define MEM3::(-> int int))


(assert (= entry true))
(assert (= return (and entry entry_return)))
(assert (= tmp13 (= _x 100)))
(assert (= tmp14 (ite tmp13 1 0)))
(assert (= entry entry_return))

(assert+ (= tmp (+ y 100)) 1)
(assert+ (= tmp4 (+ 0 0)) 1)
(assert+ (= _ tmp) 1)
(assert+ (= MEM1 (update MEM0 (tmp4) _)) 1)
(assert+ (= tmp5 (+ 0 0)) 1)
(assert+ (= tmp6 (MEM1 tmp5)) 1)
(assert+ (= tmp7 (+ 4 1)) 1)
(assert+ (= _1 tmp6) 1)
(assert+ (= MEM2 (update MEM1 (tmp7) _1)) 1)
(assert+ (= tmp8 (+ 4 1)) 1)
(assert+ (= tmp9 (MEM2 tmp8)) 1)
(assert+ (= tmp10 (+ 6 5)) 1)
(assert+ (= _2 tmp9) 1)
(assert+ (= MEM3 (update MEM2 (tmp10) _2)) 1)
(assert+ (= tmp11 (+ 6 5)) 1)
(assert+ (= tmp12 (MEM3 tmp11)) 1)
(assert+ (= _x tmp12) 1)
(assert+ (= _3 _x) 1)
(assert+ (= _retval _3) 1)

(max-sat)